package se.nullable.sbtix

import sbt._
import sbt.ProjectRef
import sbt.{Logger, ModuleID, Resolver, PatternsBasedRepository}

object NixWriter {
  def apply(versioning: Set[(String, String)], repos: Set[NixRepo], artifacts: Set[NixArtifact]) =
    s"""# This file was automatically generated by Sbtix. Do not edit manually.
       |{
       |  ${indent(Versioning(versioning.toSeq.sorted).toNix)}
       |  ${indent(NixRepoCollection(repos.toSeq.sortWith(_.toNixRef < _.toNixRef)).toNix)}
       |  ${indent(NixArtifactCollection(artifacts.toSeq.sortWith(_.toNixRef < _.toNixRef)).toNix)}
       |}
       |""".stripMargin
}

trait NixBuilder {
  def toNix = s"$toNixRef = $toNixValue;"
  def toNixRef: String
  def toNixValue: String
}

case class Versioning(versioning: Seq[(String, String)]) extends NixBuilder {
  val toNixRef = quote("versioning")

  def toNixValue: String =
    indent(versioning.map { case (scalaVersion, sbtVersion) =>
      s"""{
         |  ${indent(Version("scalaVersion", scalaVersion).toNix)}
         |  ${indent(Version("sbtVersion", sbtVersion).toNix)}
         |}""".stripMargin
    }
      .mkString("[", "\r\n", "]"))
}

case class Version(name: String, version: String) extends NixBuilder {
  val toNixRef = quote(name)

  def toNixValue: String = quote(version);
}

case class VersionList(name: String, versions: Seq[String]) extends NixBuilder {
  val toNixRef = quote(name)

  def toNixValue: String = versions.map(quote).mkString("[", ",", "]");
}

case class NixRepoCollection(repos: Seq[NixRepo]) extends NixBuilder {
  val toNixRef = quote("repos")

  def toNixValue: String =
    s"""{
       |  ${indent(repos.distinct.map(_.toNix).mkString("\r\n"))}
       |}""".stripMargin
}

case class NixRepo(name: String, pattern: Option[String]) extends NixBuilder {
  val toNixRef = quote(name)

  def toNixValue: String = quote(pattern.getOrElse(""));
}

case class NixArtifactCollection(artifacts: Seq[NixArtifact]) extends NixBuilder {
  val toNixRef = quote("artifacts")

  def toNixValue: String =
    s"""{
       |  ${indent(artifacts.distinct.map(_.toNix).mkString("\r\n"))}
       |}""".stripMargin

}

trait NixArtifact extends NixBuilder {
}

case class NixFetchedArtifact(repoName: String, relative: String, url: String, sha256: String) extends NixArtifact {
  val toNixRef = s"${quote(repoName + "/" + relative)}"

  def toNixValue =
    s"""{
       |  url = ${quote(url)};
       |  sha256 = ${quote(sha256)};
       |}""".stripMargin
}

case class NixBuiltArtifact(repoName: String, path: String) extends NixArtifact {
  val toNixRef = s"${quote(repoName + "/" + path)}"

  def toNixValue =
    s"""{
       |  type = "built";
       |  repo = ${quote(repoName)};
       |  path = ${quote(path)};
       |}""".stripMargin
}
